services:
  postgres:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ${DB_MOUNT_POINT}:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - ba_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ba_network

  kafka_broker:
    image: bitnami/kafka
    container_name: kafka_broker
    ports:
      - "${BROKER_PORT}:${BROKER_PORT}"
    environment:
      # KRaftSettings
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka_broker:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # Listener Settings
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka_broker:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      # Cluster Settings
      - KAFKA_KRAFT_CLUSTER_ID=CLUSTER_ID_1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9094 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - ba_network

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "${KUI_PORT}:${KUI_PORT}"
    environment:
      - KAFKA_CLUSTERS_0_NAME=localCluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka_broker:9092
    depends_on:
      kafka_broker:
        condition: service_healthy
    networks:
      - ba_network


  ba_producer:
    build:
      context: ./producer
      dockerfile: Dockerfile
    pull_policy: never
    image: "ba_producer:1.0.0"
    container_name: "ba_producer"
    environment:
      - PRODUCER_PORT
      - USERNAME
      - PASSWORD
    ports:
      - "${PRODUCER_PORT}:${PRODUCER_PORT}"
    volumes:
      - ./producer:/home/app
    depends_on:
      kafka_broker:
        condition: service_healthy
    networks:
      - ba_network

  ba_consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    pull_policy: never
    image: "ba_consumer:1.0.0"
    container_name: "ba_consumer"
    environment:
      - CONSUMER_PORT
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - USERNAME
      - PASSWORD
    ports:
      - "${CONSUMER_PORT}:${CONSUMER_PORT}"
    volumes:
      - ./consumer:/home/app
    depends_on:
      kafka_broker:
        condition: service_healthy
    networks:
      - ba_network

  streamlit_app:
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    pull_policy: never
    image: "ba_streamlit:1.0.0"
    container_name: ba_streamlit
    environment:
      - USERNAME
      - PASSWORD
    ports:
      - "${STREAMLIT_PORT}:8501"
    volumes:
      - ./streamlit:/app
    depends_on:
      kafka_broker:
        condition: service_healthy
      ba_consumer:
        condition: service_started
      ba_producer:
        condition: service_started
    networks:
      - ba_network
  gen_ai:
    build:
      context: ./gen_ai
      dockerfile: Dockerfile
    pull_policy: never
    image: "ba_gen_ai:1.0.0"
    container_name: ba_gen_ai
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
      - GEN_AI_PORT
    ports:
      - "${GEN_AI_PORT}:8003"
    volumes:
      - ./gen_ai:/app
    depends_on:
      kafka_broker:
        condition: service_healthy
      ba_consumer:
        condition: service_started
      ba_producer:
        condition: service_started
    networks:
      - ba_network


volumes:
  pgadmin_data:
    name: "BA_PGAdmin_Volume"

networks:
  ba_network:
    driver: bridge